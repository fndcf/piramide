// src/app/services/piramides.ts - CORRIGIDO PARA EVITAR ERRO DO FIREBASE
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { 
  Piramide, 
  NovaPiramide, 
  ConfiguracaoPiramideEspecifica
} from '../models/piramide.model';
import { EstatisticasPiramide, PiramideSeletor } from '../models/dupla.model';
import { orderBy, where } from '@angular/fire/firestore';
import { FirebaseService } from './firebase';

@Injectable({
  providedIn: 'root'
})
export class PiramidesService {
  private piramideAtual: Piramide | null = null;
  private piramideAtualSubject = new BehaviorSubject<Piramide | null>(null);
  
  public piramideAtual$ = this.piramideAtualSubject.asObservable();
  
  // Cache local para performance
  private piramidesCache: Piramide[] = [];
  private lastCacheUpdate = 0;
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutos
  
  // Flag de inicializa√ß√£o
  private isInitialized = false;
  private initializationPromise: Promise<void> | null = null;

  constructor(private firebase: FirebaseService) {
    this.inicializarDados();
  }

  // ‚úÖ M√âTODO CORRIGIDO: inicializarDados com melhor tratamento de erro
  private async inicializarDados() {
    if (this.initializationPromise) {
      return this.initializationPromise;
    }

    this.initializationPromise = this._inicializar();
    return this.initializationPromise;
  }

  private async _inicializar(): Promise<void> {
    try {
      console.log('üîÑ Inicializando PiramidesService...');
      
      // ‚úÖ AGUARDAR inicializa√ß√£o do Firebase
      const diagnostics = await this.firebase.getDiagnostics();
      if (!diagnostics.firestoreAvailable) {
        throw new Error('Firestore n√£o est√° dispon√≠vel');
      }

      // ‚úÖ TENTATIVA SEGURA de obter configura√ß√£o global
      let piramideAtualId: string | null = null;
      
      try {
        console.log('üìã Tentando obter configura√ß√£o global...');
        const configResult = await this.firebase.get('configuracoes', 'global');
        
        if (configResult.success && configResult.data?.piramideAtualId) {
          piramideAtualId = configResult.data.piramideAtualId;
          console.log('‚úÖ Configura√ß√£o global encontrada:', piramideAtualId);
        } else {
          console.log('‚ö†Ô∏è Configura√ß√£o global n√£o encontrada, ser√° criada posteriormente');
        }
      } catch (configError) {
        console.warn('‚ö†Ô∏è Erro ao acessar configura√ß√£o global:', configError);
        // Continua sem configura√ß√£o global (ser√° criada posteriormente)
      }

      // ‚úÖ TENTATIVA de obter pir√¢mide atual se ID foi encontrado
      if (piramideAtualId) {
        try {
          const piramideResult = await this.firebase.get('piramides', piramideAtualId);
          
          if (piramideResult.success && piramideResult.data) {
            this.piramideAtual = this.formatarPiramide(piramideResult.data);
            this.piramideAtualSubject.next(this.piramideAtual);
            console.log('‚úÖ Pir√¢mide atual carregada:', this.piramideAtual.nome);
            this.isInitialized = true;
            return; // Sucesso, sair da fun√ß√£o
          }
        } catch (piramideError) {
          console.warn('‚ö†Ô∏è Erro ao carregar pir√¢mide atual:', piramideError);
        }
      }

      // ‚úÖ BUSCAR primeira pir√¢mide ativa dispon√≠vel
      try {
        console.log('üîç Buscando pir√¢mides ativas...');
        const result = await this.firebase.findBy('piramides', 'status', 'ativa');

        if (result.success && result.data && result.data.length > 0) {
          console.log(`üìä ${result.data.length} pir√¢mide(s) ativa(s) encontrada(s)`);
          
          // Ordenar manualmente por dataInicio (mais antiga primeiro)
          const piramidesOrdenadas = result.data.sort((a, b) => {
            const dataA = a.dataInicio?.toDate ? a.dataInicio.toDate() : new Date(a.dataInicio);
            const dataB = b.dataInicio?.toDate ? b.dataInicio.toDate() : new Date(b.dataInicio);
            return dataA.getTime() - dataB.getTime();
          });
          
          const piramide = this.formatarPiramide(piramidesOrdenadas[0]);
          await this.selecionarPiramide(piramide.id);
          console.log('‚úÖ Primeira pir√¢mide ativa selecionada:', piramide.nome);
        } else {
          console.log('‚ö†Ô∏è Nenhuma pir√¢mide ativa encontrada');
          this.piramideAtual = null;
          this.piramideAtualSubject.next(null);
        }
      } catch (searchError) {
        console.warn('‚ö†Ô∏è Erro ao buscar pir√¢mides ativas:', searchError);
        this.piramideAtual = null;
        this.piramideAtualSubject.next(null);
      }

      this.isInitialized = true;
      console.log('‚úÖ PiramidesService inicializado');
      
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico ao inicializar PiramidesService:', error);
      this.piramideAtual = null;
      this.piramideAtualSubject.next(null);
      this.isInitialized = true; // Marcar como inicializado mesmo com erro
    }
  }

  // ‚úÖ M√âTODO auxiliar para aguardar inicializa√ß√£o
  private async aguardarInicializacao(): Promise<void> {
    if (!this.isInitialized) {
      await this.inicializarDados();
    }
  }

  // M√©todo para verificar se precisa de configura√ß√£o inicial (apenas para admin)
  async precisaConfiguracaoInicial(): Promise<boolean> {
    try {
      await this.aguardarInicializacao();
      const piramides = await this.firebase.getAll('piramides');
      return !piramides.success || !piramides.data || piramides.data.length === 0;
    } catch (error) {
      console.error('Erro ao verificar configura√ß√£o inicial:', error);
      return true;
    }
  }

  // M√©todo para criar a primeira pir√¢mide (apenas quando admin solicitar)
  async criarPrimeiraPiramide(): Promise<{ success: boolean; message: string; piramide?: Piramide }> {
    const piramidePadrao: NovaPiramide = {
      nome: 'Pir√¢mide Principal',
      descricao: 'Pir√¢mide principal do Beach Tennis',
      categoria: 'mista',
      maxDuplas: 45,
      cor: '#667eea',
      icone: 'üèÜ'
    };

    const result = await this.criarPiramide(piramidePadrao);
    if (result.success && result.piramide) {
      await this.selecionarPiramide(result.piramide.id);
    }
    return result;
  }

  private formatarPiramide(data: any): Piramide {
    return {
      ...data,
      dataInicio: data.dataInicio?.toDate ? data.dataInicio.toDate() : new Date(data.dataInicio),
      dataFim: data.dataFim?.toDate ? data.dataFim.toDate() : (data.dataFim ? new Date(data.dataFim) : undefined),
      configuracao: {
        ...this.getConfiguracaoPadrao(),
        ...data.configuracao
      }
    };
  }

  private getConfiguracaoPadrao(): ConfiguracaoPiramideEspecifica {
    return {
      posicaoLimiteDesafioTopo: 5,
      permitirDesafiosEntrePiramides: false,
      diasPrazoResposta: 7
    };
  }

  // ========== OPERA√á√ïES B√ÅSICAS CORRIGIDAS ==========
  
  // ‚úÖ M√âTODO CORRIGIDO: criarPiramide com melhor tratamento de erro
  async criarPiramide(novaPiramide: NovaPiramide): Promise<{ success: boolean; message: string; piramide?: Piramide }> {
    try {
      await this.aguardarInicializacao();
      
      // Validar entrada
      if (!novaPiramide.nome?.trim()) {
        return { success: false, message: 'Nome da pir√¢mide √© obrigat√≥rio' };
      }

      // Validar nome √∫nico
      const existeResult = await this.firebase.findFirst('piramides', 'nome', novaPiramide.nome.trim());
      if (existeResult.success) {
        return {
          success: false,
          message: 'J√° existe uma pir√¢mide com este nome'
        };
      }

      const piramideData = {
        nome: novaPiramide.nome.trim(),
        descricao: novaPiramide.descricao?.trim() || '',
        categoria: novaPiramide.categoria,
        status: 'ativa' as const,
        maxDuplas: novaPiramide.maxDuplas || 45,
        dataInicio: new Date(),
        criadoPor: 'admin', // TODO: pegar do AuthService
        configuracao: {
          ...this.getConfiguracaoPadrao(),
          ...novaPiramide.configuracao
        },
        cor: novaPiramide.cor || this.getCoresDisponiveis()[0],
        icone: novaPiramide.icone || this.getIconesDisponiveis()[0],
        ativa: true
      };

      const result = await this.firebase.create('piramides', piramideData);

      if (result.success && result.id) {
        const piramide: Piramide = {
          id: result.id,
          ...piramideData
        };

        // ‚úÖ LIMPAR cache para for√ßar reload
        await this.limparCache();
        
        console.log('‚úÖ Pir√¢mide criada e cache limpo:', piramide.nome);

        return {
          success: true,
          message: 'Pir√¢mide criada com sucesso!',
          piramide
        };
      } else {
        return {
          success: false,
          message: result.error || 'Erro ao criar pir√¢mide'
        };
      }
    } catch (error: any) {
      console.error('Erro ao criar pir√¢mide:', error);
      return {
        success: false,
        message: 'Erro ao criar pir√¢mide. Tente novamente.'
      };
    }
  }

  // ‚úÖ M√âTODO CORRIGIDO: obterPiramides com melhor cache e tratamento de erro
  async obterPiramides(): Promise<Piramide[]> {
    try {
      await this.aguardarInicializacao();
      
      // Verificar cache apenas se n√£o for muito antigo (reduzido para 2 minutos)
      const agora = Date.now();
      const CACHE_DURATION_REDUCED = 2 * 60 * 1000; // 2 minutos
      
      if (this.piramidesCache.length > 0 && (agora - this.lastCacheUpdate) < CACHE_DURATION_REDUCED) {
        console.log('üìã Usando cache das pir√¢mides');
        return [...this.piramidesCache];
      }

      console.log('üîÑ Buscando pir√¢mides no Firebase...');
      
      // ‚úÖ BUSCA SEGURA sem orderBy (pode causar erro de √≠ndice)
      const result = await this.firebase.getAll('piramides');

      if (result.success && result.data) {
        // Ordenar manualmente por dataInicio
        const piramidesOrdenadas = result.data
          .map(p => this.formatarPiramide(p))
          .sort((a, b) => b.dataInicio.getTime() - a.dataInicio.getTime()); // Mais recente primeiro

        this.piramidesCache = piramidesOrdenadas;
        this.lastCacheUpdate = agora;
        
        console.log(`‚úÖ ${this.piramidesCache.length} pir√¢mides carregadas do Firebase`);
        return [...this.piramidesCache];
      } else {
        console.error('Erro ao obter pir√¢mides:', result.error);
        return [];
      }
    } catch (error) {
      console.error('Erro ao obter pir√¢mides:', error);
      return [];
    }
  }

  async obterPiramidesPorStatus(status: string): Promise<Piramide[]> {
    try {
      await this.aguardarInicializacao();
      
      const result = await this.firebase.findBy('piramides', 'status', status);

      if (result.success && result.data) {
        // Ordenar manualmente
        const piramides = result.data
          .map(p => this.formatarPiramide(p))
          .sort((a, b) => b.dataInicio.getTime() - a.dataInicio.getTime());
        
        return piramides;
      } else {
        return [];
      }
    } catch (error) {
      console.error(`Erro ao obter pir√¢mides por status ${status}:`, error);
      return [];
    }
  }

  // ‚úÖ M√âTODO CORRIGIDO: obterPiramideSeletor com cache atualizado
  async obterPiramideSeletor(): Promise<PiramideSeletor[]> {
    try {
      const piramides = await this.obterPiramides();
      
      console.log('üîÑ Convertendo pir√¢mides para seletor...');
      
      const seletores = piramides.map(p => ({
        id: p.id,
        nome: p.nome,
        categoria: p.categoria,
        status: p.status,
        totalDuplas: 0, // TODO: calcular do DuplasService
        cor: p.cor,
        icone: p.icone,
        ultimaAtividade: p.dataInicio // TODO: calcular √∫ltima atividade real
      }));
      
      console.log(`‚úÖ ${seletores.length} seletores criados`);
      return seletores;
    } catch (error) {
      console.error('Erro ao obter seletor de pir√¢mides:', error);
      return [];
    }
  }

  // ‚úÖ M√âTODO CORRIGIDO: selecionarPiramide com melhor tratamento de erro
  async selecionarPiramide(piramideId: string): Promise<{ success: boolean; message: string }> {
    try {
      await this.aguardarInicializacao();
      
      if (!piramideId) {
        return { success: false, message: 'ID da pir√¢mide √© obrigat√≥rio' };
      }

      const result = await this.firebase.get('piramides', piramideId);
      
      if (!result.success) {
        return {
          success: false,
          message: result.error || 'Pir√¢mide n√£o encontrada'
        };
      }

      const piramide = this.formatarPiramide(result.data);

      if (piramide.status === 'arquivada') {
        return {
          success: false,
          message: 'N√£o √© poss√≠vel selecionar uma pir√¢mide arquivada'
        };
      }

      // Atualizar pir√¢mide atual
      this.piramideAtual = piramide;
      this.piramideAtualSubject.next(piramide);

      // ‚úÖ SALVAR configura√ß√£o global com tratamento de erro
      try {
        await this.firebase.set('configuracoes', 'global', {
          piramideAtualId: piramideId,
          versaoApp: '1.0.0',
          ultimaAtualizacao: new Date()
        });
      } catch (configError) {
        console.warn('‚ö†Ô∏è Erro ao salvar configura√ß√£o global:', configError);
        // Continua mesmo se n√£o conseguir salvar a configura√ß√£o
      }

      // ‚úÖ LIMPAR cache para garantir dados atualizados
      await this.limparCache();

      console.log(`‚úÖ Pir√¢mide "${piramide.nome}" selecionada`);
      return {
        success: true,
        message: `Pir√¢mide "${piramide.nome}" selecionada`
      };
    } catch (error: any) {
      console.error('Erro ao selecionar pir√¢mide:', error);
      return {
        success: false,
        message: 'Erro ao selecionar pir√¢mide'
      };
    }
  }

  getPiramideAtual(): Piramide | null {
    return this.piramideAtual;
  }

  getPiramideAtualId(): string | null {
    return this.piramideAtual?.id || null;
  }

  // ========== OUTROS M√âTODOS (mantidos iguais mas com aguardarInicializacao) ==========

  async reativarPiramide(piramideId: string): Promise<{ success: boolean; message: string }> {
    try {
      await this.aguardarInicializacao();
      
      const getResult = await this.firebase.get('piramides', piramideId);
      
      if (!getResult.success) {
        return {
          success: false,
          message: 'Pir√¢mide n√£o encontrada'
        };
      }

      const piramide = getResult.data;

      if (piramide.status === 'ativa') {
        return {
          success: false,
          message: 'Esta pir√¢mide j√° est√° ativa'
        };
      }

      if (piramide.status === 'arquivada') {
        return {
          success: false,
          message: 'N√£o √© poss√≠vel reativar uma pir√¢mide arquivada'
        };
      }

      const updateResult = await this.firebase.update('piramides', piramideId, {
        status: 'ativa',
        dataFim: null
      });

      if (updateResult.success) {
        // Se for a pir√¢mide atual, atualizar o subject
        if (this.piramideAtual?.id === piramideId) {
          this.piramideAtual.status = 'ativa';
          this.piramideAtual.dataFim = undefined;
          this.piramideAtualSubject.next(this.piramideAtual);
        }

        this.limparCache();

        return {
          success: true,
          message: `Pir√¢mide "${piramide.nome}" foi reativada com sucesso!`
        };
      } else {
        return {
          success: false,
          message: updateResult.error || 'Erro ao reativar pir√¢mide'
        };
      }
    } catch (error: any) {
      console.error('Erro ao reativar pir√¢mide:', error);
      return {
        success: false,
        message: 'Erro ao reativar pir√¢mide'
      };
    }
  }

  // ‚úÖ M√âTODO CORRIGIDO: excluirPiramide com melhor tratamento
  async excluirPiramide(piramideId: string): Promise<{ success: boolean; message: string }> {
    try {
      await this.aguardarInicializacao();
      
      const getResult = await this.firebase.get('piramides', piramideId);
      
      if (!getResult.success) {
        return {
          success: false,
          message: 'Pir√¢mide n√£o encontrada'
        };
      }

      const piramide = getResult.data;

      // S√≥ pode excluir pir√¢mides finalizadas
      if (piramide.status !== 'finalizada') {
        return {
          success: false,
          message: 'S√≥ √© poss√≠vel excluir pir√¢mides que est√£o finalizadas'
        };
      }

      // Verificar se √© a √∫ltima pir√¢mide
      const piramidesAtivas = await this.firebase.findBy('piramides', 'status', 'ativa');

      if (piramidesAtivas.success && (!piramidesAtivas.data || piramidesAtivas.data.length === 0)) {
        // Verificar pir√¢mides pausadas tamb√©m
        const piramidesPausadas = await this.firebase.findBy('piramides', 'status', 'pausada');

        if (!piramidesPausadas.success || !piramidesPausadas.data || piramidesPausadas.data.length === 0) {
          return {
            success: false,
            message: 'N√£o √© poss√≠vel excluir a √∫ltima pir√¢mide do sistema'
          };
        }
      }

      // Se for a pir√¢mide atual, selecionar outra
      if (this.piramideAtual?.id === piramideId) {
        if (piramidesAtivas.success && piramidesAtivas.data && piramidesAtivas.data.length > 0) {
          await this.selecionarPiramide(piramidesAtivas.data[0].id);
        } else {
          this.piramideAtual = null;
          this.piramideAtualSubject.next(null);
        }
      }

      // Excluir a pir√¢mide
      const deleteResult = await this.firebase.delete('piramides', piramideId);

      if (deleteResult.success) {
        // ‚úÖ LIMPAR cache
        await this.limparCache();

        console.log('‚úÖ Pir√¢mide exclu√≠da e cache limpo');

        return {
          success: true,
          message: `Pir√¢mide "${piramide.nome}" foi exclu√≠da permanentemente`
        };
      } else {
        return {
          success: false,
          message: deleteResult.error || 'Erro ao excluir pir√¢mide'
        };
      }
    } catch (error: any) {
      console.error('Erro ao excluir pir√¢mide:', error);
      return {
        success: false,
        message: 'Erro ao excluir pir√¢mide'
      };
    }
  }

  // ========== VALIDA√á√ïES DE PROTE√á√ÉO ==========
  
  isPiramideEditavel(piramideId: string): boolean {
    const piramide = this.piramidesCache.find(p => p.id === piramideId);
    return piramide?.status === 'ativa' || piramide?.status === 'pausada';
  }

  isPiramideFinalizadaOuArquivada(piramideId: string): boolean {
    const piramide = this.piramidesCache.find(p => p.id === piramideId);
    return piramide?.status === 'finalizada' || piramide?.status === 'arquivada';
  }

  podeAdicionarDuplas(piramideId: string): { pode: boolean; motivo?: string } {
    const piramide = this.piramidesCache.find(p => p.id === piramideId) || this.piramideAtual;
    
    if (!piramide || piramide.id !== piramideId) {
      return { pode: false, motivo: 'Pir√¢mide n√£o encontrada' };
    }

    switch (piramide.status) {
      case 'finalizada':
        return { pode: false, motivo: 'N√£o √© poss√≠vel adicionar duplas em uma pir√¢mide finalizada' };
      case 'arquivada':
        return { pode: false, motivo: 'N√£o √© poss√≠vel adicionar duplas em uma pir√¢mide arquivada' };
      case 'pausada':
        return { pode: false, motivo: 'Pir√¢mide est√° pausada. Reative-a para adicionar duplas' };
      default:
        return { pode: true };
    }
  }

  podeCriarDesafios(piramideId: string): { pode: boolean; motivo?: string } {
    const piramide = this.piramidesCache.find(p => p.id === piramideId) || this.piramideAtual;
    
    if (!piramide || piramide.id !== piramideId) {
      return { pode: false, motivo: 'Pir√¢mide n√£o encontrada' };
    }

    switch (piramide.status) {
      case 'finalizada':
        return { pode: false, motivo: 'N√£o √© poss√≠vel criar desafios em uma pir√¢mide finalizada' };
      case 'arquivada':
        return { pode: false, motivo: 'N√£o √© poss√≠vel criar desafios em uma pir√¢mide arquivada' };
      case 'pausada':
        return { pode: false, motivo: 'Pir√¢mide est√° pausada. Reative-a para criar desafios' };
      default:
        return { pode: true };
    }
  }

  // ========== M√âTODOS AUXILIARES ==========
  
  // ‚úÖ M√âTODO CORRIGIDO: atualizarPiramide
  async atualizarPiramide(piramideId: string, dados: Partial<Piramide>): Promise<{ success: boolean; message: string }> {
    try {
      await this.aguardarInicializacao();
      
      // Validar nome √∫nico se estiver sendo alterado
      if (dados.nome) {
        const existeResult = await this.firebase.findFirst('piramides', 'nome', dados.nome.trim());
        if (existeResult.success && existeResult.data.id !== piramideId) {
          return {
            success: false,
            message: 'J√° existe uma pir√¢mide com este nome'
          };
        }
      }

      const updateResult = await this.firebase.update('piramides', piramideId, dados);

      if (updateResult.success) {
        // Se for a pir√¢mide atual, atualizar o subject
        if (this.piramideAtual?.id === piramideId) {
          this.piramideAtual = { ...this.piramideAtual, ...dados };
          this.piramideAtualSubject.next(this.piramideAtual);
        }

        // ‚úÖ LIMPAR cache
        await this.limparCache();

        return {
          success: true,
          message: 'Pir√¢mide atualizada com sucesso!'
        };
      } else {
        return {
          success: false,
          message: updateResult.error || 'Erro ao atualizar pir√¢mide'
        };
      }
    } catch (error: any) {
      console.error('Erro ao atualizar pir√¢mide:', error);
      return {
        success: false,
        message: 'Erro ao atualizar pir√¢mide'
      };
    }
  }

  // ‚úÖ M√âTODO CORRIGIDO: alterarStatusPiramide
  async alterarStatusPiramide(piramideId: string, novoStatus: Piramide['status']): Promise<{ success: boolean; message: string }> {
    try {
      await this.aguardarInicializacao();
      
      const dados: Partial<Piramide> = { status: novoStatus };
      
      if (novoStatus === 'finalizada') {
        dados.dataFim = new Date();
      }

      const resultado = await this.atualizarPiramide(piramideId, dados);
      
      if (resultado.success) {
        // ‚úÖ LIMPAR cache adicional (j√° √© feito no atualizarPiramide, mas garantindo)
        await this.limparCache();
        
        if (novoStatus === 'finalizada') {
          const piramide = await this.firebase.get('piramides', piramideId);
          resultado.message = `Pir√¢mide "${piramide.data?.nome}" foi finalizada. Agora voc√™ pode exclu√≠-la se necess√°rio.`;
        } else {
          resultado.message = `Status alterado para "${novoStatus}" com sucesso!`;
        }
      }
      
      return resultado;
    } catch (error: any) {
      console.error('Erro ao alterar status:', error);
      return {
        success: false,
        message: 'Erro ao alterar status'
      };
    }
  }

  async arquivarPiramide(piramideId: string): Promise<{ success: boolean; message: string }> {
    try {
      await this.aguardarInicializacao();
      
      const getResult = await this.firebase.get('piramides', piramideId);
      
      if (!getResult.success) {
        return {
          success: false,
          message: 'Pir√¢mide n√£o encontrada'
        };
      }

      // Se for a pir√¢mide atual, selecionar outra
      if (this.piramideAtual?.id === piramideId) {
        const piramidesAtivas = await this.firebase.findBy('piramides', 'status', 'ativa');
        
        if (piramidesAtivas.success && piramidesAtivas.data && piramidesAtivas.data.length > 0) {
          // Encontrar uma pir√¢mide diferente da atual
          const outraPiramide = piramidesAtivas.data.find(p => p.id !== piramideId);
          if (outraPiramide) {
            await this.selecionarPiramide(outraPiramide.id);
          }
        } else {
          // N√£o h√° outras pir√¢mides ativas
          this.piramideAtual = null;
          this.piramideAtualSubject.next(null);
          
          try {
            await this.firebase.update('configuracoes', 'global', { piramideAtualId: null });
          } catch (configError) {
            console.warn('Erro ao atualizar configura√ß√£o global:', configError);
          }
        }
      }

      return await this.alterarStatusPiramide(piramideId, 'arquivada');
    } catch (error: any) {
      console.error('Erro ao arquivar pir√¢mide:', error);
      return {
        success: false,
        message: 'Erro ao arquivar pir√¢mide'
      };
    }
  }

  async obterEstatisticasPiramide(piramideId: string): Promise<EstatisticasPiramide> {
    try {
      await this.aguardarInicializacao();
      
      // TODO: Integrar com DuplasService para obter dados reais
      const piramideResult = await this.firebase.get('piramides', piramideId);
      const piramide = piramideResult.success ? piramideResult.data : null;
      
      return {
        totalDuplas: 0, // TODO: calcular do DuplasService
        vagasDisponiveis: (piramide?.maxDuplas || 45),
        totalJogos: 0, // TODO: calcular do hist√≥rico
        duplasMaisAtivas: [], // TODO: buscar do DuplasService
        ultimaAtividade: new Date(),
        tempoMedioBase: 30, // TODO: calcular real
        rotatividade: 15 // TODO: calcular real
      };
    } catch (error) {
      console.error('Erro ao obter estat√≠sticas:', error);
      return {
        totalDuplas: 0,
        vagasDisponiveis: 0,
        totalJogos: 0,
        duplasMaisAtivas: [],
        ultimaAtividade: new Date(),
        tempoMedioBase: 0,
        rotatividade: 0
      };
    }
  }

  // ========== UTILIT√ÅRIOS ==========
  
  getCoresDisponiveis(): string[] {
    return [
      '#667eea', '#764ba2', '#f093fb', '#f5576c',
      '#4facfe', '#00f2fe', '#43e97b', '#38f9d7',
      '#ffecd2', '#fcb69f', '#a8edea', '#fed6e3',
      '#ff9a9e', '#fecfef', '#ffeaa7', '#fab1a0'
    ];
  }

  getIconesDisponiveis(): string[] {
    return [
      'üèÜ', 'ü•á', 'üèê', 'üéæ', '‚ö°', 'üî•', 'üíé', 'üëë',
      'üåü', '‚≠ê', 'üí´', 'üéØ', 'üöÄ', 'üí™', 'üèÖ', 'ü•â'
    ];
  }

  getCategorias(): Array<{value: string, label: string, description: string}> {
    return [
      { value: 'masculino', label: 'Masculino', description: 'Apenas duplas masculinas' },
      { value: 'feminino', label: 'Feminino', description: 'Apenas duplas femininas' },
      { value: 'mista', label: 'Mista', description: 'Duplas mistas ou qualquer g√™nero' }
    ];
  }

  // ‚úÖ M√âTODO CORRIGIDO: limparCache
  async limparCache(): Promise<void> {
    console.log('üßπ Limpando cache das pir√¢mides...');
    this.piramidesCache = [];
    this.lastCacheUpdate = 0;
  }

  // ========== M√âTODOS DE DIAGN√ìSTICO ==========

  // Verificar status do service
  async getDiagnostics(): Promise<{
    isInitialized: boolean;
    piramideAtual: string | null;
    totalPiramidesCache: number;
    lastCacheUpdate: number;
    firebaseStatus: any;
  }> {
    try {
      const firebaseStatus = await this.firebase.getDiagnostics();
      
      return {
        isInitialized: this.isInitialized,
        piramideAtual: this.piramideAtual?.nome || null,
        totalPiramidesCache: this.piramidesCache.length,
        lastCacheUpdate: this.lastCacheUpdate,
        firebaseStatus
      };
    } catch (error) {
      return {
        isInitialized: this.isInitialized,
        piramideAtual: this.piramideAtual?.nome || null,
        totalPiramidesCache: this.piramidesCache.length,
        lastCacheUpdate: this.lastCacheUpdate,
        firebaseStatus: { error: error }
      };
    }
  }

  // For√ßar recarregamento completo
  async forceReload(): Promise<void> {
    console.log('üîÑ For√ßando recarregamento completo do PiramidesService...');
    
    // Limpar cache
    await this.limparCache();
    
    // Resetar inicializa√ß√£o
    this.isInitialized = false;
    this.initializationPromise = null;
    
    // Reinicializar
    await this.inicializarDados();
  }

  // M√©todo para teste de conectividade
  async testFirebaseConnection(): Promise<boolean> {
    try {
      await this.aguardarInicializacao();
      return await this.firebase.checkConnection();
    } catch (error) {
      console.error('Erro ao testar conex√£o Firebase:', error);
      return false;
    }
  }
}