// src/app/services/auth.ts - VERS√ÉO SIMPLIFICADA

import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { 
  Auth, 
  signInWithEmailAndPassword, 
  signOut, 
  onAuthStateChanged,
  User,
  UserCredential
} from '@angular/fire/auth';
import { Firestore } from '@angular/fire/firestore';

// ‚úÖ INTERFACE SIMPLES - Apenas admin e jogador
interface AppUser {
  uid: string;
  email?: string | null;
  tipo: 'admin' | 'jogador';
  displayName: string;
  // Propriedades espec√≠ficas do jogador
  duplaId?: string;
  dupla?: any;
  telefone?: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private currentUserSubject = new BehaviorSubject<AppUser | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();
  
  // Email do administrador
  private readonly ADMIN_EMAIL = 'admin@piramide.com';

  constructor(
    private auth: Auth,
    private firestore: Firestore
  ) {
    // ‚úÖ MONITORAR apenas login de admin via Firebase Auth
    onAuthStateChanged(this.auth, (user: User | null) => {
      if (user && user.email === this.ADMIN_EMAIL) {
        // Usu√°rio administrador logado
        const appUser: AppUser = {
          uid: user.uid,
          email: user.email,
          tipo: 'admin',
          displayName: 'Administrador'
        };
        this.currentUserSubject.next(appUser);
        console.log('üëë Admin logado via Firebase');
      } else if (!user) {
        // Verificar se h√° jogador logado localmente
        this.verificarSessaoJogadorLocal();
      }
    });

    // ‚úÖ VERIFICAR sess√£o de jogador ao inicializar
    this.verificarSessaoJogadorLocal();
  }

  // ‚úÖ LOGIN ADMIN - Via Firebase (igual ao atual)
  async loginAdmin(email: string, password: string): Promise<{success: boolean, error?: string}> {
    try {
      if (email !== this.ADMIN_EMAIL) {
        return { success: false, error: 'Email de administrador inv√°lido' };
      }

      const result: UserCredential = await signInWithEmailAndPassword(this.auth, email, password);
      
      if (result.user) {
        console.log('‚úÖ Admin logado com sucesso');
        return { success: true };
      } else {
        return { success: false, error: 'Falha na autentica√ß√£o' };
      }
    } catch (error: any) {
      console.error('Erro no login admin:', error);
      
      switch (error.code) {
        case 'auth/user-not-found':
          return { success: false, error: 'Usu√°rio administrador n√£o encontrado' };
        case 'auth/wrong-password':
          return { success: false, error: 'Senha incorreta' };
        case 'auth/invalid-email':
          return { success: false, error: 'Email inv√°lido' };
        case 'auth/too-many-requests':
          return { success: false, error: 'Muitas tentativas. Tente novamente mais tarde' };
        default:
          return { success: false, error: 'Erro ao fazer login. Tente novamente.' };
      }
    }
  }

  // ‚úÖ LOGIN JOGADOR - Via localStorage (sem Firebase)
  async loginJogador(jogadorInfo: {duplaId: string, dupla: any, telefone: string}): Promise<{success: boolean, error?: string}> {
    try {
      console.log('üèê Login de jogador:', jogadorInfo.dupla.jogador1, '/', jogadorInfo.dupla.jogador2);
      
      // ‚úÖ VALIDA√á√ïES B√ÅSICAS
      if (!jogadorInfo.duplaId || !jogadorInfo.dupla) {
        return { success: false, error: 'Informa√ß√µes da dupla s√£o obrigat√≥rias' };
      }

      if (!jogadorInfo.dupla.jogador1 || !jogadorInfo.dupla.jogador2) {
        return { success: false, error: 'Dupla deve ter dois jogadores' };
      }

      if (!jogadorInfo.telefone) {
        return { success: false, error: 'Telefone √© obrigat√≥rio' };
      }

      // ‚úÖ CRIAR sess√£o do jogador
      const appUser: AppUser = {
        uid: `jogador_${jogadorInfo.duplaId}`, // ID √∫nico baseado na dupla
        tipo: 'jogador',
        displayName: `${jogadorInfo.dupla.jogador1}/${jogadorInfo.dupla.jogador2}`,
        duplaId: jogadorInfo.duplaId,
        dupla: jogadorInfo.dupla,
        telefone: jogadorInfo.telefone
      };

      // ‚úÖ SALVAR sess√£o localmente (simples e eficiente)
      const sessaoJogador = {
        ...appUser,
        loginTimestamp: new Date().toISOString(),
        ultimoAcesso: new Date().toISOString()
      };

      localStorage.setItem('sessao_jogador', JSON.stringify(sessaoJogador));
      
      // ‚úÖ ATUALIZAR estado da aplica√ß√£o
      this.currentUserSubject.next(appUser);
      
      console.log('‚úÖ Jogador logado com sucesso');
      return { success: true };
      
    } catch (error: any) {
      console.error('‚ùå Erro no login jogador:', error);
      return { success: false, error: 'Erro ao fazer login como jogador. Tente novamente.' };
    }
  }

  // ‚úÖ VERIFICAR sess√£o de jogador salva localmente
  private verificarSessaoJogadorLocal(): void {
    try {
      const sessaoSalva = localStorage.getItem('sessao_jogador');
      
      if (sessaoSalva) {
        const sessao = JSON.parse(sessaoSalva);
        
        // ‚úÖ VERIFICAR se a sess√£o n√£o expirou (24 horas)
        const loginTime = new Date(sessao.loginTimestamp);
        const agora = new Date();
        const diferencaHoras = (agora.getTime() - loginTime.getTime()) / (1000 * 60 * 60);
        
        if (diferencaHoras <= 24) {
          // ‚úÖ SESS√ÉO V√ÅLIDA - restaurar jogador
          const appUser: AppUser = {
            uid: sessao.uid,
            tipo: 'jogador',
            displayName: sessao.displayName,
            duplaId: sessao.duplaId,
            dupla: sessao.dupla,
            telefone: sessao.telefone
          };
          
          // Atualizar √∫ltimo acesso
          sessao.ultimoAcesso = new Date().toISOString();
          localStorage.setItem('sessao_jogador', JSON.stringify(sessao));
          
          this.currentUserSubject.next(appUser);
          console.log('üîÑ Sess√£o de jogador restaurada:', appUser.displayName);
        } else {
          // ‚úÖ SESS√ÉO EXPIRADA - remover
          localStorage.removeItem('sessao_jogador');
          console.log('‚è∞ Sess√£o de jogador expirada - removida');
        }
      }
    } catch (error) {
      console.error('Erro ao verificar sess√£o local:', error);
      localStorage.removeItem('sessao_jogador');
    }
  }

  // ‚úÖ LOGOUT GERAL
  async logout(): Promise<void> {
    try {
      const currentUser = this.currentUserSubject.value;
      
      if (currentUser?.tipo === 'admin') {
        // ‚úÖ LOGOUT DO ADMIN - via Firebase
        await signOut(this.auth);
        console.log('üëë Admin deslogado');
      } else if (currentUser?.tipo === 'jogador') {
        // ‚úÖ LOGOUT DO JOGADOR - remover sess√£o local
        localStorage.removeItem('sessao_jogador');
        console.log('üèê Jogador deslogado');
      }
      
      // ‚úÖ LIMPAR estado da aplica√ß√£o
      this.currentUserSubject.next(null);
      
    } catch (error) {
      console.error('Erro no logout:', error);
      // ‚úÖ FOR√áAR limpeza mesmo com erro
      localStorage.removeItem('sessao_jogador');
      this.currentUserSubject.next(null);
    }
  }

  // ‚úÖ M√âTODOS DE VERIFICA√á√ÉO (simplificados)
  isAdmin(): boolean {
    const currentUser = this.currentUserSubject.value;
    return currentUser?.tipo === 'admin';
  }

  isJogador(): boolean {
    const currentUser = this.currentUserSubject.value;
    return currentUser?.tipo === 'jogador';
  }

  isLoggedIn(): boolean {
    return this.currentUserSubject.value !== null;
  }

  getCurrentUser(): AppUser | null {
    return this.currentUserSubject.value;
  }

  getCurrentFirebaseUser(): User | null {
    return this.auth.currentUser;
  }

  // ‚úÖ M√âTODO para criar usu√°rio admin (igual ao atual)
  async criarUsuarioAdmin(): Promise<{success: boolean, message: string}> {
    try {
      console.log('Para criar o usu√°rio administrador:');
      console.log('1. V√° no Firebase Console > Authentication');
      console.log('2. Clique em "Add user"');
      console.log(`3. Email: ${this.ADMIN_EMAIL}`);
      console.log('4. Password: escolha uma senha segura');
      
      return {
        success: true,
        message: 'Instru√ß√µes para criar admin exibidas no console'
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erro ao criar usu√°rio admin'
      };
    }
  }

  // ‚úÖ M√âTODO para obter informa√ß√µes espec√≠ficas do jogador
  getJogadorInfo(): {duplaId: string, dupla: any, telefone: string} | null {
    const currentUser = this.currentUserSubject.value;
    
    if (currentUser?.tipo === 'jogador') {
      return {
        duplaId: currentUser.duplaId!,
        dupla: currentUser.dupla,
        telefone: currentUser.telefone!
      };
    }
    
    return null;
  }

  // ‚úÖ M√âTODO para verificar se a sess√£o do jogador ainda √© v√°lida
  verificarValidadeSessaoJogador(): boolean {
    try {
      const sessaoSalva = localStorage.getItem('sessao_jogador');
      
      if (!sessaoSalva) return false;
      
      const sessao = JSON.parse(sessaoSalva);
      const loginTime = new Date(sessao.loginTimestamp);
      const agora = new Date();
      const diferencaHoras = (agora.getTime() - loginTime.getTime()) / (1000 * 60 * 60);
      
      return diferencaHoras <= 24;
    } catch {
      return false;
    }
  }
}