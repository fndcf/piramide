// src/app/components/seletor-piramide/seletor-piramide.ts

import { Component, EventEmitter, OnInit, OnDestroy, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Subscription } from 'rxjs';
import { PiramidesService } from '../../services/piramides';
import { Piramide } from '../../models/piramide.model';

@Component({
  selector: 'app-seletor-piramide',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './seletor-piramide.html',
  styleUrls: ['./seletor-piramide.scss']
})
export class SeletorPiramideComponent implements OnInit, OnDestroy {
  @Output() piramideSelecionada = new EventEmitter<Piramide>();
  
  piramides: Piramide[] = [];
  piramideAtual: Piramide | null = null;
  mostrarDropdown = false;
  carregando = false;
  
  // ‚úÖ ADICIONAR: Subscription para mudan√ßas
  private subscriptions: Subscription[] = [];

  constructor(private piramidesService: PiramidesService) {}

  async ngOnInit() {
    console.log('üèóÔ∏è SeletorPiramideComponent iniciado');
    
    // ‚úÖ ADICIONAR: Subscribir para mudan√ßas na pir√¢mide atual
    const piramideSub = this.piramidesService.piramideAtual$.subscribe(piramide => {
      console.log('üìä Seletor - Pir√¢mide mudou via subscription:', piramide?.nome || 'null');
      this.piramideAtual = piramide;
    });
    this.subscriptions.push(piramideSub);
    
    // Carregar dados iniciais
    await this.carregarPiramides();
    this.piramideAtual = this.piramidesService.getPiramideAtual();
    
    console.log('‚úÖ Seletor inicializado:', {
      totalPiramides: this.piramides.length,
      piramideAtual: this.piramideAtual?.nome || 'Nenhuma'
    });
  }

  // ‚úÖ ADICIONAR: Cleanup das subscriptions
  ngOnDestroy() {
    this.subscriptions.forEach(sub => sub.unsubscribe());
    console.log('üßπ SeletorPiramideComponent destru√≠do - subscriptions limpas');
  }

  // ‚úÖ M√âTODO MELHORADO: carregarPiramides com refresh autom√°tico
  async carregarPiramides(forceRefresh = false) {
    this.carregando = true;
    try {
      console.log('üîÑ Seletor - Carregando pir√¢mides...', { forceRefresh });
      
      // ‚úÖ Limpar cache se for√ßado
      if (forceRefresh) {
        await this.piramidesService.limparCache();
      }
      
      const todasPiramides = await this.piramidesService.obterPiramides();
      
      // Filtrar apenas pir√¢mides ativas e finalizadas (vis√≠veis para p√∫blico)
      this.piramides = todasPiramides.filter(p => 
        p.status === 'ativa' || p.status === 'finalizada'
      );
      
      console.log(`‚úÖ Seletor - ${this.piramides.length} pir√¢mide(s) carregada(s)`);
    } catch (error) {
      console.error('‚ùå Seletor - Erro ao carregar pir√¢mides:', error);
    }
    this.carregando = false;
  }

  // ‚úÖ M√âTODO CORRIGIDO: selecionarPiramide
  async selecionarPiramide(piramide: Piramide) {
    if (piramide.id === this.piramideAtual?.id) {
      this.fecharDropdown();
      return; // J√° √© a atual
    }

    console.log('üìä Seletor - Selecionando pir√¢mide:', piramide.nome);
    this.carregando = true;
    
    const resultado = await this.piramidesService.selecionarPiramide(piramide.id);
    
    if (resultado.success) {
      console.log('‚úÖ Seletor - Pir√¢mide selecionada com sucesso');
      
      // ‚úÖ A atualiza√ß√£o local ser√° feita via subscription
      // Apenas emitir evento e fechar dropdown
      this.piramideSelecionada.emit(piramide);
      this.fecharDropdown();
    } else {
      console.error('‚ùå Seletor - Erro ao selecionar pir√¢mide:', resultado.message);
    }
    
    this.carregando = false;
  }

  // ‚úÖ NOVO: M√©todo para refresh manual
  async refreshPiramides() {
    console.log('üîÑ Seletor - Refresh manual solicitado');
    await this.carregarPiramides(true);
  }

  // ‚úÖ M√âTODO MELHORADO: toggleDropdown com refresh
  async toggleDropdown() {
    if (!this.mostrarDropdown) {
      // ‚úÖ Atualizar lista antes de abrir
      console.log('üìÇ Seletor - Abrindo dropdown, atualizando lista...');
      await this.carregarPiramides(true);
    }
    
    this.mostrarDropdown = !this.mostrarDropdown;
  }

  fecharDropdown() {
    this.mostrarDropdown = false;
  }

  getStatusBadgeClass(status: string): string {
    const classes = {
      'ativa': 'status-ativa',
      'finalizada': 'status-finalizada'
    };
    return classes[status as keyof typeof classes] || 'status-default';
  }

  getStatusTexto(status: string): string {
    const textos = {
      'ativa': 'Ativa',
      'finalizada': 'Finalizada'
    };
    return textos[status as keyof typeof textos] || status;
  }

  getCategoriaTexto(categoria: string): string {
    const categorias = {
      'masculino': 'Masculino',
      'feminino': 'Feminino',
      'mista': 'Mista'
    };
    return categorias[categoria as keyof typeof categorias] || categoria;
  }

  trackByPiramideId(index: number, piramide: Piramide): string {
    return piramide.id;
  }
}