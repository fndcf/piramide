// src/app/components/gerenciar-piramides/gerenciar-piramides.ts - ATUALIZADO

import { Component, EventEmitter, Input, Output, OnInit, SimpleChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PiramidesService } from '../../services/piramides';
import { NovaPiramide, Piramide } from '../../models/piramide.model';
import { EstatisticasPiramide, PiramideSeletor } from '../../models/dupla.model';

@Component({
  selector: 'app-gerenciar-piramides',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './gerenciar-piramides.html',
  styleUrls: ['./gerenciar-piramides.scss']
})
export class GerenciarPiramidesComponent implements OnInit {
  @Input() mostrar = false;
  @Output() fechar = new EventEmitter<void>();
  @Output() piramideSelecionada = new EventEmitter<Piramide>();

  piramides: PiramideSeletor[] = [];
  piramideAtual: Piramide | null = null;
  loading = false;
  mensagem = '';
  tipoMensagem: 'success' | 'error' | 'info' = 'info';
  loadingMessage = '';
  
  // Modal de nova pir√¢mide
  mostrarModalNova = false;
  novaPiramide: NovaPiramide = this.resetarNovaPiramide();
  
  // Modal de edi√ß√£o
  mostrarModalEdicao = false;
  piramideEdicao: Partial<Piramide> = {};
  
  // Modal de estat√≠sticas
  mostrarModalEstatisticas = false;
  estatisticasSelecionada: EstatisticasPiramide | null = null;
  
  // ‚úÖ NOVO: Modal de confirma√ß√£o para exclus√£o
  mostrarModalConfirmacaoExclusao = false;
  piramideParaExcluir: PiramideSeletor | null = null;
  textoConfirmacao = ''; // ‚úÖ NOVA VARI√ÅVEL para o texto de confirma√ß√£o
  
  // Filtros e busca
  filtroStatus = 'todas';
  filtroCategoria = 'todas';
  termoBusca = '';
  
  // Dados auxiliares
  cores: string[] = [];
  icones: string[] = [];
  categorias: Array<{value: string, label: string, description: string}> = [];

  constructor(private piramidesService: PiramidesService) {
    // Inicializar dados auxiliares no constructor
    this.cores = this.piramidesService.getCoresDisponiveis();
    this.icones = this.piramidesService.getIconesDisponiveis();
    this.categorias = this.piramidesService.getCategorias();
    
    // Agora podemos inicializar novaPiramide com seguran√ßa
    this.novaPiramide = this.resetarNovaPiramide();
  }

  async ngOnInit() {
    console.log('üèóÔ∏è GerenciarPiramidesComponent iniciado');
    await this.carregarDados();
  }

  // ‚úÖ M√âTODO CORRIGIDO: ngOnChanges para detectar abertura do modal
  async ngOnChanges(changes: SimpleChanges) {
    console.log('üîÑ GerenciarPiramidesComponent - mudan√ßas detectadas:', changes);
    
    // ‚úÖ Recarregar sempre que o modal for aberto
    if (changes['mostrar'] && changes['mostrar'].currentValue === true) {
      console.log('‚úÖ Modal aberto - recarregando dados...');
      await this.carregarDados(true);
    }
  }

  // ‚úÖ M√âTODO MELHORADO: carregarDados com force refresh
  async carregarDados(forceRefresh = false) {
    this.loading = true;
    this.mensagem = '';
    this.loadingMessage = forceRefresh ? 'Atualizando lista...' : 'Carregando pir√¢mides...';
    
    try {
      console.log('üìä Carregando dados das pir√¢mides...', { forceRefresh });
      
      // ‚úÖ FOR√áAR refresh do service (limpar cache)
      if (forceRefresh) {
        await this.piramidesService.limparCache();
      }
      
      // Carregar pir√¢mides
      this.piramides = await this.piramidesService.obterPiramideSeletor();
      console.log(`‚úÖ ${this.piramides.length} pir√¢mide(s) carregada(s)`);
      
      // Atualizar pir√¢mide atual
      this.piramideAtual = this.piramidesService.getPiramideAtual();
      console.log('üìã Pir√¢mide atual:', this.piramideAtual?.nome || 'Nenhuma');
      
    } catch (error) {
      console.error('‚ùå Erro ao carregar pir√¢mides:', error);
      this.mostrarMensagem('Erro ao carregar pir√¢mides', 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  // ‚úÖ NOVO: M√©todo para for√ßar refresh manual
  async forcarRefresh() {
    console.log('üîÑ Refresh manual solicitado');
    await this.carregarDados(true);
  }

  // ========== FILTROS E BUSCA ==========
  
  get piramidesFiltradas(): PiramideSeletor[] {
    let resultado = [...this.piramides];
    
    // Filtro por status
    if (this.filtroStatus !== 'todas') {
      resultado = resultado.filter(p => p.status === this.filtroStatus);
    }
    
    // Filtro por categoria
    if (this.filtroCategoria !== 'todas') {
      resultado = resultado.filter(p => p.categoria === this.filtroCategoria);
    }
    
    // Busca por nome
    if (this.termoBusca.trim()) {
      const termo = this.termoBusca.toLowerCase().trim();
      resultado = resultado.filter(p => 
        p.nome.toLowerCase().includes(termo)
      );
    }
    
    return resultado;
  }

  // ========== SELE√á√ÉO DE PIR√ÇMIDE ==========
  
  // ‚úÖ M√âTODO CORRIGIDO: selecionarPiramide com refresh
  async selecionarPiramide(piramide: PiramideSeletor) {
    if (piramide.id === this.piramideAtual?.id) {
      return; // J√° √© a atual
    }
    
    this.loading = true;
    this.loadingMessage = 'Selecionando pir√¢mide...';
    
    const resultado = await this.piramidesService.selecionarPiramide(piramide.id);
    
    if (resultado.success) {
      this.piramideAtual = this.piramidesService.getPiramideAtual();
      this.mostrarMensagem(resultado.message, 'success');
      this.piramideSelecionada.emit(this.piramideAtual!);
      
      // ‚úÖ RECARREGAR dados ap√≥s sele√ß√£o para atualizar estado
      await this.carregarDados(true);
    } else {
      this.mostrarMensagem(resultado.message, 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  // ========== NOVA PIR√ÇMIDE ==========
  
  abrirModalNova() {
    // Garantir que os arrays est√£o carregados
    if (this.cores.length === 0) {
      this.cores = this.piramidesService.getCoresDisponiveis();
    }
    if (this.icones.length === 0) {
      this.icones = this.piramidesService.getIconesDisponiveis();
    }
    if (this.categorias.length === 0) {
      this.categorias = this.piramidesService.getCategorias();
    }
    
    this.novaPiramide = this.resetarNovaPiramide();
    this.mostrarModalNova = true;
    this.mensagem = '';
  }

  // ‚úÖ M√âTODO CORRIGIDO: criarPiramide com refresh autom√°tico
  async criarPiramide() {
    if (!this.validarNovaPiramide()) {
      return;
    }

    this.loading = true;
    this.loadingMessage = 'Criando pir√¢mide...';
    console.log('üèóÔ∏è Criando nova pir√¢mide:', this.novaPiramide.nome);
    
    const resultado = await this.piramidesService.criarPiramide(this.novaPiramide);
    
    if (resultado.success) {
      this.mostrarMensagem(resultado.message, 'success');
      
      // ‚úÖ RECARREGAR dados ap√≥s cria√ß√£o
      console.log('üîÑ Recarregando dados ap√≥s cria√ß√£o...');
      await this.carregarDados(true);
      
      this.fecharModalNova();
      
      // ‚úÖ SELE√á√ÉO AUTOM√ÅTICA CORRIGIDA
      if (resultado.piramide) {
        const piramideAtual = this.piramidesService.getPiramideAtual();
        console.log('üîç Estado ap√≥s cria√ß√£o:', {
          piramideCriada: resultado.piramide.nome,
          piramideAtual: piramideAtual?.nome || 'Nenhuma',
          totalPiramides: this.piramides.length
        });
        
        // Selecionar automaticamente se:
        // 1. N√£o h√° pir√¢mide atual OU
        // 2. √â a primeira pir√¢mide criada
        const deveSelecionar = !piramideAtual || this.piramides.length === 1;
        
        if (deveSelecionar) {
          console.log('üéØ Selecionando nova pir√¢mide automaticamente...');
          
          try {
            // Usar o servi√ßo diretamente para selecionar
            const selecaoResult = await this.piramidesService.selecionarPiramide(resultado.piramide.id);
            
            if (selecaoResult.success) {
              console.log('‚úÖ Pir√¢mide selecionada automaticamente');
              
              // ‚úÖ ATUALIZAR estado local
              this.piramideAtual = this.piramidesService.getPiramideAtual();
              
              // ‚úÖ EMITIR evento para o componente pai
              if (this.piramideAtual) {
                console.log('üì° Emitindo evento de pir√¢mide selecionada');
                this.piramideSelecionada.emit(this.piramideAtual);
              }
              
              // ‚úÖ RECARREGAR dados para refletir a sele√ß√£o
              await this.carregarDados(true);
              
              // ‚úÖ FECHAR modal ap√≥s sele√ß√£o autom√°tica
              setTimeout(() => {
                console.log('üö™ Fechando modal ap√≥s sele√ß√£o autom√°tica');
                this.fecharModal();
              }, 1500);
              
            } else {
              console.error('‚ùå Erro ao selecionar pir√¢mide automaticamente:', selecaoResult.message);
            }
          } catch (error) {
            console.error('‚ùå Erro na sele√ß√£o autom√°tica:', error);
          }
        } else {
          console.log('‚ÑπÔ∏è Pir√¢mide criada mas n√£o selecionada automaticamente (j√° existe pir√¢mide atual)');
        }
      }
    } else {
      this.mostrarMensagem(resultado.message, 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  fecharModalNova() {
    this.mostrarModalNova = false;
    this.novaPiramide = this.resetarNovaPiramide();
    this.mensagem = '';
  }

  private validarNovaPiramide(): boolean {
    if (!this.novaPiramide.nome?.trim()) {
      this.mostrarMensagem('Nome da pir√¢mide √© obrigat√≥rio', 'error');
      return false;
    }
    
    if (this.novaPiramide.nome.trim().length < 3) {
      this.mostrarMensagem('Nome deve ter pelo menos 3 caracteres', 'error');
      return false;
    }
    
    if (!this.novaPiramide.categoria) {
      this.mostrarMensagem('Categoria √© obrigat√≥ria', 'error');
      return false;
    }
    
    return true;
  }

  private resetarNovaPiramide(): NovaPiramide {
    return {
      nome: '',
      descricao: '',
      categoria: 'mista',
      maxDuplas: 45,
      cor: this.cores && this.cores.length > 0 ? this.cores[0] : '#667eea',
      icone: this.icones && this.icones.length > 0 ? this.icones[0] : 'üèÜ'
    };
  }

  // ========== EDI√á√ÉO DE PIR√ÇMIDE ==========
  
  abrirModalEdicao(piramide: PiramideSeletor) {
    this.piramideEdicao = {
      id: piramide.id,
      nome: piramide.nome,
      categoria: piramide.categoria as any
    };
    this.mostrarModalEdicao = true;
    this.mensagem = '';
  }

  // ‚úÖ M√âTODO CORRIGIDO: salvarEdicao com refresh
  async salvarEdicao() {
    if (!this.piramideEdicao.nome?.trim()) {
      this.mostrarMensagem('Nome √© obrigat√≥rio', 'error');
      return;
    }

    this.loading = true;
    this.loadingMessage = 'Salvando altera√ß√µes...';
    
    const resultado = await this.piramidesService.atualizarPiramide(
      this.piramideEdicao.id!,
      this.piramideEdicao
    );
    
    if (resultado.success) {
      this.mostrarMensagem(resultado.message, 'success');
      
      // ‚úÖ RECARREGAR dados ap√≥s edi√ß√£o
      await this.carregarDados(true);
      
      this.fecharModalEdicao();
    } else {
      this.mostrarMensagem(resultado.message, 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  // ‚úÖ NOVO: M√©todo para aplicar filtros
  aplicarFiltros() {
    // Os filtros s√£o aplicados automaticamente pelo getter piramidesFiltradas
    console.log('üîç Filtros aplicados:', {
      status: this.filtroStatus,
      categoria: this.filtroCategoria,
      busca: this.termoBusca
    });
  }

  // ‚úÖ NOVO: M√©todo para limpar filtros
  limparFiltros() {
    this.filtroStatus = 'todas';
    this.filtroCategoria = 'todas';
    this.termoBusca = '';
    console.log('üóëÔ∏è Filtros limpos');
  }

  // ‚úÖ NOVO: TrackBy function para performance
  trackByPiramideId(index: number, piramide: PiramideSeletor): string {
    return piramide.id;
  }

  fecharModalEdicao() {
    this.mostrarModalEdicao = false;
    this.piramideEdicao = {};
    this.mensagem = '';
  }

  // ========== ‚úÖ NOVAS A√á√ïES DA PIR√ÇMIDE: REATIVA√á√ÉO E EXCLUS√ÉO ==========
  
  // ‚úÖ M√âTODO CORRIGIDO: alterarStatus com refresh
  async alterarStatus(piramide: PiramideSeletor, novoStatus: Piramide['status']) {
    let confirmacao = false;
    let mensagemConfirmacao = '';

    // Mensagens espec√≠ficas para cada tipo de altera√ß√£o
    switch (novoStatus) {
      case 'pausada':
        mensagemConfirmacao = `Tem certeza que deseja PAUSAR a pir√¢mide "${piramide.nome}"?\n\n` +
                             `‚ö†Ô∏è Efeitos:\n` +
                             `‚Ä¢ N√£o ser√° poss√≠vel adicionar duplas\n` +
                             `‚Ä¢ N√£o ser√° poss√≠vel criar desafios\n` +
                             `‚Ä¢ A pir√¢mide ficar√° "congelada"\n\n` +
                             `Voc√™ pode reativ√°-la a qualquer momento.`;
        break;
        
      case 'finalizada':
        mensagemConfirmacao = `Tem certeza que deseja FINALIZAR a pir√¢mide "${piramide.nome}"?\n\n` +
                             `‚ö†Ô∏è ATEN√á√ÉO - Esta √© uma a√ß√£o restritiva:\n` +
                             `‚Ä¢ N√£o ser√° poss√≠vel adicionar duplas\n` +
                             `‚Ä¢ N√£o ser√° poss√≠vel criar desafios\n` +
                             `‚Ä¢ A pir√¢mide ser√° marcada como conclu√≠da\n` +
                             `‚Ä¢ Ap√≥s finalizar, voc√™ poder√° EXCLUIR a pir√¢mide\n\n` +
                             `Voc√™ pode reativar se necess√°rio.`;
        break;
        
      case 'ativa':
        mensagemConfirmacao = `Tem certeza que deseja REATIVAR a pir√¢mide "${piramide.nome}"?\n\n` +
                             `‚úÖ Efeitos:\n` +
                             `‚Ä¢ Voltar√° a aceitar duplas\n` +
                             `‚Ä¢ Voltar√° a aceitar desafios\n` +
                             `‚Ä¢ Ficar√° totalmente funcional novamente`;
        break;
    }

    confirmacao = confirm(mensagemConfirmacao);
    
    if (!confirmacao) return;

    this.loading = true;
    this.loadingMessage = 'Alterando status...';
    
    const resultado = await this.piramidesService.alterarStatusPiramide(piramide.id, novoStatus);
    
    if (resultado.success) {
      this.mostrarMensagem(resultado.message, 'success');
      
      // ‚úÖ RECARREGAR dados ap√≥s altera√ß√£o
      await this.carregarDados(true);
    } else {
      this.mostrarMensagem(resultado.message, 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  // ‚úÖ NOVA FUN√á√ÉO: Reativar pir√¢mide
  async reativarPiramide(piramide: PiramideSeletor) {
    await this.alterarStatus(piramide, 'ativa');
  }

  // ‚úÖ NOVA FUN√á√ÉO: Confirmar exclus√£o
  confirmarExclusao(piramide: PiramideSeletor) {
    if (piramide.status !== 'finalizada') {
      this.mostrarMensagem('S√≥ √© poss√≠vel excluir pir√¢mides finalizadas', 'error');
      return;
    }

    this.piramideParaExcluir = piramide;
    this.mostrarModalConfirmacaoExclusao = true;
  }

  // ‚úÖ M√âTODO CORRIGIDO: excluirPiramide com refresh
  async excluirPiramide() {
    if (!this.piramideParaExcluir) return;

    this.loading = true;
    this.loadingMessage = 'Excluindo pir√¢mide...';
    console.log('üóëÔ∏è Excluindo pir√¢mide:', this.piramideParaExcluir.nome);
    
    const resultado = await this.piramidesService.excluirPiramide(this.piramideParaExcluir.id);
    
    if (resultado.success) {
      this.mostrarMensagem(resultado.message, 'success');
      
      // ‚úÖ RECARREGAR dados ap√≥s exclus√£o
      await this.carregarDados(true);
      
      this.fecharModalConfirmacaoExclusao();
    } else {
      this.mostrarMensagem(resultado.message, 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  fecharModalConfirmacaoExclusao() {
    this.mostrarModalConfirmacaoExclusao = false;
    this.piramideParaExcluir = null;
    this.textoConfirmacao = ''; // ‚úÖ LIMPAR o texto de confirma√ß√£o
  }

  // ‚úÖ NOVA FUN√á√ÉO: Validar se a confirma√ß√£o est√° correta
  isConfirmacaoValida(): boolean {
    if (!this.piramideParaExcluir) return false;
    const textoEsperado = `EXCLUIR ${this.piramideParaExcluir.nome}`;
    return this.textoConfirmacao.trim() === textoEsperado;
  }

  // ‚úÖ M√âTODO MELHORADO: arquivarPiramide com refresh
  async arquivarPiramide(piramide: PiramideSeletor) {
    const confirmacao = confirm(
      `Tem certeza que deseja ARQUIVAR a pir√¢mide "${piramide.nome}"?\n\n` +
      `Esta a√ß√£o ir√°:\n` +
      `‚Ä¢ Tornar a pir√¢mide inacess√≠vel\n` +
      `‚Ä¢ Manter os dados salvos\n` +
      `‚Ä¢ Selecionar outra pir√¢mide automaticamente se esta for a atual`
    );
    
    if (!confirmacao) return;

    this.loading = true;
    this.loadingMessage = 'Arquivando pir√¢mide...';
    
    const resultado = await this.piramidesService.arquivarPiramide(piramide.id);
    
    if (resultado.success) {
      this.mostrarMensagem(resultado.message, 'success');
      
      // ‚úÖ RECARREGAR dados ap√≥s arquivamento
      await this.carregarDados(true);
    } else {
      this.mostrarMensagem(resultado.message, 'error');
    }
    
    this.loading = false;
    this.loadingMessage = '';
  }

  // ========== ESTAT√çSTICAS ==========
  
  async abrirEstatisticas(piramide: PiramideSeletor) {
    this.loading = true;
    try {
      this.estatisticasSelecionada = await this.piramidesService.obterEstatisticasPiramide(piramide.id);
      this.mostrarModalEstatisticas = true;
    } catch (error) {
      this.mostrarMensagem('Erro ao carregar estat√≠sticas', 'error');
    }
    this.loading = false;
  }

  fecharModalEstatisticas() {
    this.mostrarModalEstatisticas = false;
    this.estatisticasSelecionada = null;
  }

  // ========== UTILIT√ÅRIOS ==========
  
  getStatusBadgeClass(status: string): string {
    const classes = {
      'ativa': 'status-ativa',
      'pausada': 'status-pausada',
      'finalizada': 'status-finalizada',
      'arquivada': 'status-arquivada'
    };
    return classes[status as keyof typeof classes] || 'status-default';
  }

  getCategoriaNome(categoria: string): string {
    const cat = this.categorias.find(c => c.value === categoria);
    return cat?.label || categoria;
  }

  getCategoriaDescricao(categoria: string): string {
    const cat = this.categorias.find(c => c.value === categoria);
    return cat?.description || '';
  }

  formatarData(data: Date): string {
    return new Date(data).toLocaleDateString('pt-BR');
  }

  isAtual(piramide: PiramideSeletor): boolean {
    return this.piramideAtual?.id === piramide.id;
  }

  // ‚úÖ NOVOS M√âTODOS: Verifica√ß√µes de status
  podeReativar(piramide: PiramideSeletor): boolean {
    return piramide.status === 'pausada' || piramide.status === 'finalizada';
  }

  podeExcluir(piramide: PiramideSeletor): boolean {
    return piramide.status === 'finalizada';
  }

  isPiramideEditavel(piramide: PiramideSeletor): boolean {
    return piramide.status === 'ativa' || piramide.status === 'pausada';
  }

  getStatusTexto(status: string): string {
    const textos = {
      'ativa': 'Ativa',
      'pausada': 'Pausada',
      'finalizada': 'Finalizada',
      'arquivada': 'Arquivada'
    };
    return textos[status as keyof typeof textos] || status;
  }

  fecharModal() {
    this.mostrar = false;
    this.fechar.emit();
    this.mensagem = '';
  }

  private mostrarMensagem(mensagem: string, tipo: 'success' | 'error' | 'info') {
    this.mensagem = mensagem;
    this.tipoMensagem = tipo;
  }
}